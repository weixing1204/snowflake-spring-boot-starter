package com.weixing.snowflake.autoconfigure;import com.weixing.snowflake.core.SnowflakeIdWorker;import com.weixing.snowflake.util.SnowflakeUtils;import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.env.Environment;import org.springframework.util.StringUtils;/** * 雪花算法工具类的自动装配 * * @author weixing * @date 2019.12.26 */@Configuration@ConditionalOnClass(SnowflakeIdWorker.class)@EnableConfigurationProperties({SnowflakeConfigurationProperties.class})public class SnowflakeAutoConfiguration {    @Bean    @ConditionalOnMissingBean(SnowflakeIdWorker.class)    public SnowflakeIdWorker snowflakeIdWorker(            Environment environment,            SnowflakeConfigurationProperties properties) {        long workerId = properties.getWorker();        long datacenterId = properties.getDatacenter();        String worker = environment.getProperty(SnowflakeUtils.WORKER_PROPERTY_NAME);        String datacenter = environment.getProperty(SnowflakeUtils.DATACENTER_PROPERTY_NAME);        if (StringUtils.hasText(worker)) {            workerId = Long.parseLong(worker);        }        if (StringUtils.hasText(datacenter)) {            datacenterId = Long.parseLong(datacenter);        }        SnowflakeIdWorker snowflakeIdWorker = new SnowflakeIdWorker(workerId, datacenterId);        return snowflakeIdWorker;    }}